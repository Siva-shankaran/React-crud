--------------APP.JSX-----------------------

// Updated App.jsx
import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Routes, Navigate, Link } from 'react-router-dom';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import 'bootstrap/dist/css/bootstrap.min.css';
import UserCard from './components/UserCard';
import UserDetails from './components/UserDetails';
import UpdateUser from './components/UpdateUser';
import Login from './components/Login';
import './App.css';
import AddUser from './components/AddUser';

function PrivateRoute({ children, isAuthenticated }) {
  return isAuthenticated ? children : <Navigate to="/login" replace />;
}

function App() {
  const [users, setUsers] = useState([]);
  const [authUsers, setAuthUsers] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);

  const addUser = (user) => {
    setUsers([...users, { ...user, id: users.length + 1 }]);
    toast.success('User added successfully!');
  };

  const handleLogout = () => {
    setCurrentUser(null);
    navigate('/login'); // Redirect to login after logout
  };

  return (
    <Router>
      <div className="container d-flex flex-column justify-content-center align-items-center vh-100">
        {/* Header */}
        <header className="text-center mb-4">
          <h1 className="text-primary display-4">User Management System</h1>
        </header>

        {/* Navigation Bar */}
        <div className="navbar">
          <Link to="/" className="nav-item">
            Home
          </Link>
          <Link to="/add-user" className="nav-item">
            Add User
          </Link>
          <Link to="/dashboard" className="nav-item">
            Dashboard
          </Link>
          
          <Link to="/login" className="nav-item" onClick={handleLogout}>
  Logout
</Link>

        </div>

        {/* Main Content */}
        <main className="w-100">
          <Routes>
            <Route
              path="/login"
              element={
                <Login
                  authUsers={authUsers}
                  setAuthUsers={setAuthUsers}
                  setCurrentUser={setCurrentUser}
                />
              }
            />
            <Route
              path="/"
              element={
                <PrivateRoute isAuthenticated={!!currentUser}>
                  <UserCard users={users} />
                </PrivateRoute>
              }
            />
            <Route
              path="/user/:id"
              element={
                <PrivateRoute isAuthenticated={!!currentUser}>
                  <UserDetails users={users} setUsers={setUsers} />
                </PrivateRoute>
              }
            />
            <Route
              path="/update/:id"
              element={
                <PrivateRoute isAuthenticated={!!currentUser}>
                  <UpdateUser users={users} setUsers={setUsers} />
                </PrivateRoute>
              }
            />
            {/* Placeholder routes for Add User, Dashboard, and Logout */}
            <Route
              path="/add-user"
              element={
                <PrivateRoute isAuthenticated={!!currentUser}>
                 <AddUser addUser={addUser} />
                </PrivateRoute>
              }
            />
            <Route
              path="/dashboard"
              element={
                <PrivateRoute isAuthenticated={!!currentUser}>
                  <div>Dashboard Page (Under Construction)</div>
                </PrivateRoute>
              }
            />
          </Routes>
        </main>

        {/* Toast Notifications */}
        <ToastContainer />
      </div>
    </Router>
  );
}

export default App;


----------------------------------AddUser.jsx--------------------------------

// AddUser.jsx
import React, { useState } from 'react';
import './AddUser.css'; // Import the CSS file for styling

const AddUser = ({ addUser }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    if (name && email && phone) {
      addUser({ name, email, phone });
      setName('');
      setEmail('');
      setPhone('');
    } else {
      alert('Please fill all the fields!');
    }
  };

  return (
    <div className="app">
      <h1>Add User</h1>
      <div className="form-container">
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Enter Name"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <input
            type="email"
            placeholder="Enter Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <input
            type="text"
            placeholder="Enter Phone"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
          />
          <button type="submit">Add User</button>
        </form>
      </div>
    </div>
  );
};

export default AddUser;


---------------------------------UserCard.jsx------------------------------

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import './UserCard.css'; // Import the CSS file for styling

const UserCard = ({ users }) => {
  return (
    <div className="app">
      <h1>User List</h1>
      <div className="user-list">
        {users.length === 0 ? (
          <p>No users available. Please add a user.</p>
        ) : (
          users.map((user) => (
            <Link to={`/user/${user.id}`} key={user.id} className="user-card">
              <h3>{user.name}</h3>
            </Link>
          ))
        )}
      </div>
    </div>
  );
};

export default UserCard;


-------------------------UserDetails.jsx-------------------------------------

import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';

const UserDetails = ({ users, setUsers }) => {
  const { id } = useParams();
  const navigate = useNavigate();

  const user = users.find((u) => u.id === parseInt(id));

  const handleDelete = () => {3
    setUsers(users.filter((u) => u.id !== parseInt(id)));
    toast.success('User deleted successfully!');
    navigate('/');
  };

  return (
    <div className="user-details">
      <h2>{user.name}</h2>
      <p>Email: {user.email}</p>
      <p>Phone: {user.phone}</p>
      <button onClick={handleDelete}>Delete</button>
      <button onClick={() => navigate(`/update/${id}`)}>Update</button>
    </div>
  );
};

export default UserDetails;

---------------------Login.jsx-----------------------


import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Login.css';

const Login = ({ authUsers, setAuthUsers, setCurrentUser }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    if (isRegistering) {
      // Registration logic
      if (authUsers.find((user) => user.username === username)) {
        alert('Username already exists!');
      } else {
        setAuthUsers([...authUsers, { username, password }]);
        alert('Registration successful!');
        setIsRegistering(false);
      }
    } else {
      // Login logic
      const user = authUsers.find(
        (user) => user.username === username && user.password === password
      );
      if (user) {
        setCurrentUser(user);
        navigate('/');
      } else {
        alert('Invalid credentials!');
      }
    }
    setUsername('');
    setPassword('');
  };

  return (
    <div className="login-container">
      <h2>{isRegistering ? 'Register' : 'Login'}</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">{isRegistering ? 'Register' : 'Login'}</button>
      </form>
      <p>
        {isRegistering ? 'Already have an account?' : 'New user?'}{' '}
        <button onClick={() => setIsRegistering(!isRegistering)}>
          {isRegistering ? 'Login' : 'Register'}
        </button>
      </p>
    </div>
  );
};

export default Login;


-------------------------------UpdateUser.jsx------------


import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';

const UpdateUser = ({ users, setUsers }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const user = users.find((u) => u.id === parseInt(id));

  const [name, setName] = useState(user.name);
  const [email, setEmail] = useState(user.email);
  const [phone, setPhone] = useState(user.phone);

  const handleSubmit = (e) => {
    e.preventDefault();
    const updatedUser = { id: user.id, name, email, phone };
    setUsers(users.map((u) => (u.id === user.id ? updatedUser : u)));
    toast.success('User updated successfully!');
    navigate('/');
  };

  return (
    <div className="update-form">
      <h2>Update User</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Enter Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          type="email"
          placeholder="Enter Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="text"
          placeholder="Enter Phone"
          value={phone}
          onChange={(e) => setPhone(e.target.value)}
        />
        <button type="submit">Update User</button>
      </form>
    </div>
  );
};

export default UpdateUser;

----------------------------------App.css-----------------------

/* Updated App.css for Navigation Bar */

body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
    background: url('webbg.webp') no-repeat center center fixed;
    background-size: cover;
    color: #fff;
  }
  
  .container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  
  header {
    text-align: center;
    margin-bottom: 20px;
  }
  
  header h1 {
    font-size: 3rem;
    text-shadow: 0 0 20px #007bff;
  }
  
  /* Navigation Bar */
  .navbar {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.7);
    padding: 10px 20px;
    border-radius: 25px;
    margin: 20px auto;
    max-width: 600px;
  }
  
  .navbar .nav-item {
    padding: 10px 20px;
    border-radius: 20px;
    color: #fff;
    font-weight: bold;
    text-align: center;
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  .navbar .nav-item:hover {
    background-color: #007bff;
    color: #fff;
  }
  
  .navbar .nav-item.active {
    background-color: #6c757d;
    color: #fff;
  }
  
  footer {
    background-color: rgba(0, 0, 0, 0.7);
    padding: 10px 20px;
    text-align: center;
    width: 100%;
    position: absolute;
    bottom: 0;
  }
  
  footer p {
    margin: 0;
    color: #aaa;
  }
  
  /* Buttons */
  button {
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  button:hover {
    transform: translateY(-3px);
  }
  
  /* Utility classes */
  .text-primary {
    color: #007bff;
  }
  
  .vh-100 {
    height: 100vh;
  }
  
  .d-flex {
    display: flex;
  }
  
  .justify-content-center {
    justify-content: center;
  }
  
  .align-items-center {
    align-items: center;
  }
  
  /* Ensure no text overflow */
  input, button {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  *{
    justify-content: center;
  }

-------------------------UserCard.css-------------

/* General Styling */
body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
    color: #ffffff;
  }
  
  /* App Container */
  .app {
    text-align: center;
    padding: 20px;
    min-height: 100vh;
  }
  
  /* Form Container */
  .form-container {
    background-color: #1e1e1e;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    margin: 0 auto;
  }
  
  .form-container input {
    width: 100%;
    padding: 12px;
    margin-bottom: 15px;
    border-radius: 8px;
    border: 1px solid #ccc;
    background-color: #2c2c2c;
    color: #fff;
    font-size: 16px;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  .form-container input::placeholder {
    color: #aaa;
  }
  
  .form-container input:focus {
    border-color: #ff416c;
    box-shadow: 0 0 10px #ff416c;
    outline: none;
  }
  
  .form-container button {
    background: linear-gradient(to right, #ff416c, #ff4b2b);
    color: #fff;
    border: none;
    padding: 12px;
    width: 100%;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease;
  }
  
  .form-container button:hover {
    background-color: #ff4b2b;
    box-shadow: 0 0 20px #ff4b2b;
    transform: translateY(-3px);
  }
  
  /* User List */
  .user-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }
  
  /* User Card Styling */
.user-card {
    background-color: var(--card-bg-color);
    padding: 20px;
    border-radius: 12px;
    text-align: center;
    color: #ff416c;
    font-weight: bold;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 2px solid transparent;
    background-image: linear-gradient(var(--card-bg-color), var(--card-bg-color)),
      linear-gradient(to right, #ff416c, #ff4b2b);
    background-origin: border-box;
    background-clip: content-box, border-box;
  }
  
  .user-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 0 15px rgba(255, 65, 108, 0.8);
  }
  
  /* Responsive Design */
  @media (max-width: 600px) {
    .form-container {
      width: 100%;
    }
  
    .user-list {
      grid-template-columns: 1fr;
    }
  }
  .dashboard-button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 8px;
    cursor: pointer;
    margin-left: 20px;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  .dashboard-button:hover {
    background-color: #0056b3;
    box-shadow: 0 0 12px rgba(0, 123, 255, 0.5);
  }
  

-------------------------------------AddUser.css------------------------

/* Updated App.css for Navigation Bar */
/* General Styles */
body {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Poppins', sans-serif;
  background: url('webbg.webp') no-repeat center center fixed;
  background-size: cover;
  color: #f8f9fa; /* Light color for better readability */
}

.container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

header {
  text-align: center;
  margin-bottom: 20px;
}

header h1 {
  font-size: 3rem;
  text-shadow: 2px 2px 10px rgba(0, 0, 0, 0.7); /* Text shadow for clarity */
  color: #f8f9fa; /* Lighter color for better contrast */
}
/* Navigation Bar */
.navbar {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgba(0, 0, 0, 0.7);
  padding: 10px 20px;
  border-radius: 25px;
  margin: 20px auto;
  max-width: 600px;
}

.navbar .nav-item {
  padding: 10px 20px;
  border-radius: 20px;
  color: #f8f9fa; /* Brighter text color */
  font-weight: bold;
  text-align: center;
  cursor: pointer;
  transition: background-color 0.3s ease, color 0.3s ease;
}
.navbar .nav-item:hover {
  background-color: #007bff;
  color: #fff;
}

.navbar .nav-item.active {
  background-color: #6c757d;
  color: #fff;
}

footer {
  background-color: rgba(0, 0, 0, 0.8); /* Darker footer for clarity */
  padding: 10px 20px;
  text-align: center;
  width: 100%;
  position: absolute;
  bottom: 0;
}
footer p {
  margin: 0;
  color: #ddd; /* Light gray text for better readability */
}


/* Input Fields and Buttons */
input, button {
  font-size: 1rem;
  padding: 10px;
  border: none;
  border-radius: 5px;
  margin: 10px 0;
  width: 100%;
  max-width: 400px;
}

input {
  background-color: rgba(255, 255, 255, 0.9); /* Slightly transparent white */
  color: #000; /* Dark text for input fields */
}


button {
  background-color: #007bff;
  color: #fff;
  font-weight: bold;
  transition: all 0.3s ease;
}

button:hover {
  background-color: #0056b3;
  transform: translateY(-3px);
}

/* Utility classes */
.text-primary {
  color: #007bff;
}

.vh-100 {
  height: 100vh;
}

.d-flex {
  display: flex;
}

.justify-content-center {
  justify-content: center;
}

.align-items-center {
  align-items: center;
}
/* Prevent Text Overflow */
input, button {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Adjust Form Container */
.form-container {
  background-color: rgba(0, 0, 0, 0.8); /* Semi-transparent black for form background */
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5); /* Subtle shadow for depth */
}

.form-container input, .form-container button {
  font-size: 1rem;
  margin: 10px 0;
}

h1, h2 {
  color: #f8f9fa; /* Light text color */
  text-shadow: 1px 1px 5px rgba(0, 0, 0, 0.8); /* Subtle shadow for better visibility */
}


*{
  justify-content: center;
}


-----------------------------Login.css------------------

/* Main container styling */
.login-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  background-color: #000; /* Pure black background for modern look */
  color: #f0f0f0; /* Light text for contrast */
}

/* Title styling */
.login-container h2 {
  margin-bottom: 20px;
  font-size: 2.2rem;
  font-weight: 600;
  color: #ffffff;
  text-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
}

/* Form container with elevation */
.login-container form {
  display: flex;
  flex-direction: column;
  gap: 15px;
  width: 320px;
  padding: 30px;
  background-color: #121212; /* Darker form background for elevation */
  border-radius: 12px;
  box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.5); /* Modern elevation effect */
}

/* Input field styling */
.login-container input {
  padding: 12px;
  font-size: 1rem;
  border: none;
  border-radius: 8px;
  background-color: #1a1a1a;
  color: #f0f0f0;
  outline: none;
  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
}

.login-container input::placeholder {
  color: #aaa; /* Placeholder text color */
}

/* Button styling with hover effect */
.login-container button {
  padding: 12px;
  font-size: 1rem;
  font-weight: bold;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0px 4px 12px rgba(0, 123, 255, 0.4);
}

.login-container button:hover {
  background-color: #0056b3;
  box-shadow: 0px 6px 14px rgba(0, 86, 179, 0.6);
}

/* For small screens */
@media (max-width: 480px) {
  .login-container form {
    width: 90%;
  }
}
