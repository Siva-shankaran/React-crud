-------------------------APP.JSX-----------------------

import React, { useState } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import UserCard from './components/UserCard';
import UserDetails from './components/UserDetails';
import UpdateUser from './components/UpdateUser';
import './App.css';

function App() {
  // State for managing users
  const [users, setUsers] = useState([]);
  const [darkMode, setDarkMode] = useState(false);

  // Function to toggle Dark Mode
  const toggleDarkMode = () => {
    setDarkMode(!darkMode);
    document.body.classList.toggle('dark-mode');
  };

  // Function to add a new user
  const addUser = (user) => {
    setUsers([...users, { ...user, id: users.length + 1 }]);
    toast.success('User added successfully!');
  };

  return (
    <Router>
      <div className={`app-container ${darkMode ? 'dark' : ''}`}>
        {/* App Header */}
        <header>
          <h1>User Management System</h1>
          <button onClick={toggleDarkMode} className="toggle-dark-mode">
            {darkMode ? 'Light Mode' : 'Dark Mode'}
          </button>
        </header>

        {/* Routes */}
        <main>
          <Routes>
            <Route path="/" element={<UserCard users={users} addUser={addUser} />} />
            <Route path="/user/:id" element={<UserDetails users={users} setUsers={setUsers} />} />
            <Route path="/update/:id" element={<UpdateUser users={users} setUsers={setUsers} />} />
          </Routes>
        </main>

        {/* Toast Notifications */}
        <ToastContainer />
      </div>
    </Router>
  );
}

export default App;

------------------------------------------USERCARD.JSX----------------------------

import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import './UserCard.css'; // Import the CSS file for styling

const UserCard = ({ users, addUser }) => {
  const [name, setName] = useState('');
  const [email, setEmail] = useState('');
  const [phone, setPhone] = useState('');

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    if (name && email && phone) {
      addUser({ name, email, phone });
      setName('');
      setEmail('');
      setPhone('');
    } else {
      alert('Please fill all the fields!');
    }
  };

  return (
    <div className="app">
      <h1>Add User</h1>
      <div className="form-container">
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Enter Name"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <input
            type="email"
            placeholder="Enter Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <input
            type="text"
            placeholder="Enter Phone"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
          />
          <button type="submit">Add User</button>
        </form>
      </div>

      <h2>User List</h2>
      <div className="user-list">
        {users.map((user) => (
          <Link to={`/user/${user.id}`} key={user.id} className="user-card">
            <h3>{user.name}</h3>
          </Link>
        ))}
      </div>
    </div>
  );
};

export default UserCard;

-----------------------------------------------------USERDETAILS----------------------------

import React from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';

const UserDetails = ({ users, setUsers }) => {
  const { id } = useParams();
  const navigate = useNavigate();

  const user = users.find((u) => u.id === parseInt(id));

  const handleDelete = () => {
    setUsers(users.filter((u) => u.id !== parseInt(id)));
    toast.success('User deleted successfully!');
    navigate('/');
  };

  return (
    <div className="user-details">
      <h2>{user.name}</h2>
      <p>Email: {user.email}</p>
      <p>Phone: {user.phone}</p>
      <button onClick={handleDelete}>Delete</button>
      <button onClick={() => navigate(`/update/${id}`)}>Update</button>
    </div>
  );
};

export default UserDetails;

----------------------------------UPDATEUSER.JSX-----------------

import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';

const UpdateUser = ({ users, setUsers }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const user = users.find((u) => u.id === parseInt(id));

  const [name, setName] = useState(user.name);
  const [email, setEmail] = useState(user.email);
  const [phone, setPhone] = useState(user.phone);

  const handleSubmit = (e) => {
    e.preventDefault();
    const updatedUser = { id: user.id, name, email, phone };
    setUsers(users.map((u) => (u.id === user.id ? updatedUser : u)));
    toast.success('User updated successfully!');
    navigate('/');
  };

  return (
    <div className="update-form">
      <h2>Update User</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Enter Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          type="email"
          placeholder="Enter Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="text"
          placeholder="Enter Phone"
          value={phone}
          onChange={(e) => setPhone(e.target.value)}
        />
        <button type="submit">Update User</button>
      </form>
    </div>
  );
};

export default UpdateUser;

-----------------------------------APP.CSS---------------

body {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Arial', sans-serif;
  background-color: #f3f4f6;
  transition: background-color 0.3s ease;
}

h1 {
  text-align: center;
  margin-top: 20px;
  color: #222;
  position: relative;
  font-size: 2.5rem;
}

h1::after {
  content: '';
  display: block;
  width: 50%;
  height: 4px;
  background: linear-gradient(to right, #007bff, #00d2ff);
  border-radius: 10px;
  margin: 8px auto 0;
  animation: water 1.5s infinite alternate;
}

@keyframes water {
  from {
    width: 50%;
  }
  to {
    width: 80%;
  }
}

.dark-mode-toggle {
  position: fixed;
  top: 20px;
  right: 20px;
  background-color: #fff;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.dark-mode-toggle img {
  width: 30px;
  height: 30px;
  transition: transform 0.3s ease;
}

body.dark-mode {
  background-color: #121212;
  color: #e0e0e0;
}

.dark-mode .form-container,
.dark-mode .user-card {
  background-color: #1e1e1e;
  color: #e0e0e0;
  box-shadow: 0 4px 12px rgba(255, 255, 255, 0.1);
}

body.dark-mode h1 {
  color: #fff;
  text-shadow: 0 0 12px #00d2ff;
}

body.dark-mode .form-container input {
  background-color: #333;
  color: #e0e0e0;
  border-color: #444;
}

body.dark-mode .form-container button {
  background-color: #00d2ff;
}

body.dark-mode .form-container button:hover {
  background-color: #007bff;
  box-shadow: 0 0 15px #00d2ff;
}

@media (max-width: 600px) {
  .form-container,
  .user-list {
    width: 100%;
  }
}

.input-group {
  display: flex;
  gap: 10px;
}

.input-group input {
  flex: 1;
  padding: 12px;
  border-radius: 8px;
  border: 1px solid #ccc;
  background-color: #f9f9f9;
  transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.input-group input:focus {
  border-color: #007bff;
  box-shadow: 0 0 12px rgba(0, 123, 255, 0.5);
  background-color: #fff;
}

.input-group button {
  padding: 12px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

.input-group button:hover {
  background-color: #0056b3;
  box-shadow: 0 0 12px #007bff;
}

* {
  justify-content: center;
}

------------------------------USECARD.CSS ------------------

/* General Styling */
body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
   
    color: #ffffff;
  }
  
  /* App Container */
  .app {
    text-align: center;
    padding: 20px;
    min-height: 100vh;
  }
  
  /* Form Container */
  .form-container {
    background-color: #1e1e1e;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    max-width: 400px;
    margin: 0 auto;
  }
  
  .form-container input {
    width: 100%;
    padding: 12px;
    margin-bottom: 15px;
    border-radius: 8px;
    border: 1px solid #ccc;
    background-color: #2c2c2c;
    color: #fff;
    font-size: 16px;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  .form-container input::placeholder {
    color: #aaa;
  }
  
  .form-container input:focus {
    border-color: #ff416c;
    box-shadow: 0 0 10px #ff416c;
    outline: none;
  }
  
  .form-container button {
    background: linear-gradient(to right, #ff416c, #ff4b2b);
    color: #fff;
    border: none;
    padding: 12px;
    width: 100%;
    border-radius: 8px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.2s ease;
  }
  
  .form-container button:hover {
    background-color: #ff4b2b;
    box-shadow: 0 0 20px #ff4b2b;
    transform: translateY(-3px);
  }
  
  /* User List */
  .user-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }
  
  /* User Card Styling */
.user-card {
    background-color: var(--card-bg-color);
    padding: 20px;
    border-radius: 12px;
    text-align: center;
    color: #ff416c;
    font-weight: bold;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 2px solid transparent;
    background-image: linear-gradient(var(--card-bg-color), var(--card-bg-color)),
      linear-gradient(to right, #ff416c, #ff4b2b);
    background-origin: border-box;
    background-clip: content-box, border-box;
  }
  
  .user-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 0 15px rgba(255, 65, 108, 0.8);
  }
  
  /* Responsive Design */
  @media (max-width: 600px) {
    .form-container {
      width: 100%;
    }
  
    .user-list {
      grid-template-columns: 1fr;
    }
  }
  
