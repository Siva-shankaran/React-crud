import React, { createContext, useState } from 'react';

// Create the Context
export const AuthContext = createContext();

// Create the Provider Component
export const AuthProvider = ({ children }) => {
  const [authUsers, setAuthUsers] = useState([]);
  const [currentUser, setCurrentUser] = useState(null);

  return (
    <AuthContext.Provider value={{ authUsers, setAuthUsers, currentUser, setCurrentUser }}>
      {children}
    </AuthContext.Provider>
  );
};


-----------app. jsx----

import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from './AuthContext';
import Login from './Login';
import PrivateRoute from './PrivateRoute';
import UserCard from './UserCard';
import UserDetails from './UserDetails';
import UpdateUser from './UpdateUser';

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/login" element={<Login />} />
          <Route
            path="/user/:id"
            element={
              <PrivateRoute>
                <UserDetails />
              </PrivateRoute>
            }
          />
          <Route
            path="/update/:id"
            element={
              <PrivateRoute>
                <UpdateUser />
              </PrivateRoute>
            }
          />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;



-----------login . jsx-----

import React, { useState, useContext } from 'react';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from './AuthContext';
import './Login.css';

const Login = () => {
  const { authUsers, setAuthUsers, setCurrentUser } = useContext(AuthContext);
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    if (isRegistering) {
      // Registration logic
      if (authUsers.find((user) => user.username === username)) {
        alert('Username already exists!');
      } else {
        setAuthUsers([...authUsers, { username, password }]);
        alert('Registration successful!');
        setIsRegistering(false);
      }
    } else {
      // Login logic
      const user = authUsers.find(
        (user) => user.username === username && user.password === password
      );
      if (user) {
        setCurrentUser(user);
        navigate('/');
      } else {
        alert('Invalid credentials!');
      }
    }
    setUsername('');
    setPassword('');
  };

  return (
    <div className="login-container">
      <h2>{isRegistering ? 'Register' : 'Login'}</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">{isRegistering ? 'Register' : 'Login'}</button>
      </form>
      <p>
        {isRegistering ? 'Already have an account?' : 'New user?'}{' '}
        <button onClick={() => setIsRegistering(!isRegistering)}>
          {isRegistering ? 'Login' : 'Register'}
        </button>
      </p>
    </div>
  );
};

export default Login;



--------------privateroute------

import React, { useContext } from 'react';
import { Navigate } from 'react-router-dom';
import { AuthContext } from './AuthContext';

const PrivateRoute = ({ children }) => {
  const { currentUser } = useContext(AuthContext);

  return currentUser ? children : <Navigate to="/login" />;
};

export default PrivateRoute;


